// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "go-fulfillment/models"
)

// CreateOrderReader is a Reader for the CreateOrder structure.
type CreateOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateOrderCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateOrderConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateOrderCreated creates a CreateOrderCreated with default headers values
func NewCreateOrderCreated() *CreateOrderCreated {
	return &CreateOrderCreated{}
}

/*CreateOrderCreated handles this case with default header values.

Order Created
*/
type CreateOrderCreated struct {
	Payload *models.Order
}

func (o *CreateOrderCreated) Error() string {
	return fmt.Sprintf("[POST /orders][%d] createOrderCreated  %+v", 201, o.Payload)
}

func (o *CreateOrderCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Order)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderBadRequest creates a CreateOrderBadRequest with default headers values
func NewCreateOrderBadRequest() *CreateOrderBadRequest {
	return &CreateOrderBadRequest{}
}

/*CreateOrderBadRequest handles this case with default header values.

Invalid order object
*/
type CreateOrderBadRequest struct {
	Payload *models.StandardError
}

func (o *CreateOrderBadRequest) Error() string {
	return fmt.Sprintf("[POST /orders][%d] createOrderBadRequest  %+v", 400, o.Payload)
}

func (o *CreateOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrderUnauthorized creates a CreateOrderUnauthorized with default headers values
func NewCreateOrderUnauthorized() *CreateOrderUnauthorized {
	return &CreateOrderUnauthorized{}
}

/*CreateOrderUnauthorized handles this case with default header values.

You do not have permission to create orders
*/
type CreateOrderUnauthorized struct {
}

func (o *CreateOrderUnauthorized) Error() string {
	return fmt.Sprintf("[POST /orders][%d] createOrderUnauthorized ", 401)
}

func (o *CreateOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateOrderConflict creates a CreateOrderConflict with default headers values
func NewCreateOrderConflict() *CreateOrderConflict {
	return &CreateOrderConflict{}
}

/*CreateOrderConflict handles this case with default header values.

Conflict
*/
type CreateOrderConflict struct {
	Payload *models.StandardErrorWithContext
}

func (o *CreateOrderConflict) Error() string {
	return fmt.Sprintf("[POST /orders][%d] createOrderConflict  %+v", 409, o.Payload)
}

func (o *CreateOrderConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StandardErrorWithContext)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
